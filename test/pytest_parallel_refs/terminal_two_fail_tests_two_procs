[=]+ test session starts [=]+
platform [^\n]*
cachedir: [^\n]*
?(metadata: [^\n]*)?
rootdir: [^\n]*
plugins: [^\n]*
collecting ... [\s]*collected 2 items[\s]*

(?# [This is a comment until the closing parenthesis]
    The following lines use the regex 'lookahead' mechanism to match the lines in any order
    This is useful because schedulers may not schedule tests in the same order
)(?=.*test_two_fail_tests_two_procs.py::test_fail_1\[2\] FAILED
)(?=.*test_two_fail_tests_two_procs.py::test_fail_2\[2\] FAILED
).*

[=]+ FAILURES [=]+
(?=.*[_]+ test_fail_1\[2\] [_]+

[-]+ On rank 0 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_1\(comm\):
>       assert 0
E       assert 0

[^\n]*test_two_fail_tests_two_procs.py:6: AssertionError

[-]+ On rank 1 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_1\(comm\):
>       assert 0
E       assert 0

[^\n]*test_two_fail_tests_two_procs.py:6: AssertionError
)(?=.*[_]+ test_fail_2\[2\] [_]+

[-]+ On rank 0 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_2\(comm\):
>       assert 0
E       assert 0

[^\n]*test_two_fail_tests_two_procs.py:11: AssertionError

[-]+ On rank 1 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_2\(comm\):
>       assert 0
E       assert 0

[^\n]*test_two_fail_tests_two_procs.py:11: AssertionError
).*
[=]+ short test summary info [=]+
(?=.*FAILED [^\n]*test_two_fail_tests_two_procs.py::test_fail_1\[2\][^\n]*
)(?=.*FAILED [^\n]*test_two_fail_tests_two_procs.py::test_fail_2\[2\][^\n]*
).*
[=]+ 2 failed in [^\n]*s [=]+
