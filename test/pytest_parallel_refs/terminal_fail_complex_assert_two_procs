[=]+ test session starts [=]+
platform [^\n]*
cachedir: [^\n]*
?(?:metadata: [^\n]*)?
rootdir: [^\n]*
?(?:configfile: [^\n]*)?
?(?:plugins: [^\n]*)?
collecting ... [\s]*collected 1 item[\s]*
?(?:Submitting tests to SLURM...)?
?(?:SLURM job [^\n]* has been submitted)?

[^\n]*test_fail_complex_assert_two_procs.py::test_fail_with_complex_assert_reporting\[2\] FAILED

[=]+ FAILURES [=]+
[_]+ test_fail_with_complex_assert_reporting\[2\] [_]+

[-]+ On rank 0 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_with_complex_assert_reporting\(comm\):
        if comm.Get_rank\(\) == 0:
>           assert 1 == 0
E           assert 1 == 0

[^\n]*test_fail_complex_assert_two_procs.py:7: AssertionError

[-]+ On rank 1 of 2 [-]+
comm = <mpi4py.MPI.Intracomm object at [^\n]*>

    @pytest_parallel.mark.parallel\(2\)
    def test_fail_with_complex_assert_reporting\(comm\):
        if comm.Get_rank\(\) == 0:
            assert 1 == 0
        if comm.Get_rank\(\) == 1:
>           assert \(np.array\(\[0,1,2\]\) == np.array\(\[0,1,3\]\)\).all\(\)
E           assert (?:np.)?False_?
E            \+  where (?:np.)?False_? = <built-in method all of numpy\.ndarray object at [^\n]*>\(\)
E            \+    where <built-in method all of numpy\.ndarray object at [^\n]*> = array\(\[0, 1, 2\]\) == array\(\[0, 1, 3\]\)
?(?:[^\n]*)?
E                 Full diff:
E                 - array\(\[0, 1, 3\]\)
E                 \?              \^
E                 \+ array\(\[0, 1, 2\]\)
E                 \?              \^.all

[^\n]*test_fail_complex_assert_two_procs.py:9: AssertionError
[=]+ short test summary info [=]+
FAILED [^\n]*test_fail_complex_assert_two_procs.py::test_fail_with_complex_assert_reporting\[2\][^\n]*
[=]+ 1 failed in [^\n]*s [=]+
